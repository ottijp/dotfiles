[[plugins]]
repo = 'EdenEast/nightfox.nvim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'
if = "!exists('g:vscode')"

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'thinca/vim-quickrun'
if = "!exists('g:vscode')"
hook_add = '''
function! QuickRunWithArgsIfDefined(mode)
  if exists('b:quickrun_args')
    execute 'QuickRun -args "' . b:quickrun_args . '" -mode ' . a:mode
  else
    execute 'QuickRun -mode ' . a:mode
  endif
endfunction

nnoremap <Leader>r :call QuickRunWithArgsIfDefined('n')<CR>
vnoremap <Leader>r :<C-u>call QuickRunWithArgsIfDefined('v')<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
# Configuration is managed by myself. Binary installation is needed for fzf.vim to be loaded properly.
build = './install --bin'
if = "!exists('g:vscode')"

[[plugins]]
repo =  'junegunn/fzf.vim'
if = "!exists('g:vscode')"
hook_add = '''
function! s:FzfBookmark()
  let l:BS = "\u08" " <C-h>
  let l:cmdtype = getcmdtype()
  let l:args = {
  \   'source': 'cat $HOME/bookmarks',
  \   'sink': { lines -> lines },
  \   'down': '~50%'
  \ } " sink does nothing
  if l:cmdtype == ':'
    let l:list = fzf#run(fzf#wrap(l:args))
    if len(list)
      return escape(substitute(list[0], '^.\{-,},', '', ''), ' ')
    else
      return 'a' . l:BS " workaround for redraw problem
    endif
  endif
endfunction

function! s:FzfFile()
  let l:BS = "\u08" " <C-h>
  let l:cmdtype = getcmdtype()
  let l:cmdline = getcmdline()
  let l:dir = substitute(l:cmdline, '^[^\\]\+ \(.\{-1,}\)/\?$', '\1', '')
  let l:args = {
  \   'source': 'find ' . l:dir . ' -follow',
  \   'sink': { lines -> lines },
  \   'down': '~50%',
  \ } " sink does nothing
  if l:cmdtype == ':'
    let l:list = fzf#run(fzf#wrap(l:args))
    if len(list)
      return "\<C-u>" . substitute(l:cmdline, '^\([^\\]\+ \)\(.\{-1,}\)$', '\1' . escape(list[0], ' '), '')
    else
      return 'a' . l:BS " workaround for redraw problem
    endif
  endif
  return ''
endfunction

function! s:list_buffers()
  redir => list
  silent ls
  redir END
  return split(list, "\n")
endfunction

function! s:delete_buffers(lines)
  execute 'bdelete' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction

" delete buffer
command! BD call fzf#run(fzf#wrap({
      \ 'source': s:list_buffers(),
      \ 'sink*': { lines -> s:delete_buffers(lines) },
      \ 'options': '--multi --reverse --bind ctrl-a:select-all'
      \ }))

" open sibiling file
command! -bang SFiles call fzf#vim#files(expand('%:p:h'), {
      \ 'source': 'find . -depth 1 -type f',
      \ 'options': ['--info=inline', '--preview', 'cat {}']
      \ }, <bang>0)

let g:fzf_vim = {}
let g:fzf_vim.preview_window = ['down,50%', 'ctrl-/']

cnoremap <expr> <C-x>b <SID>FzfBookmark()
cnoremap <expr> <C-x>f <SID>FzfFile()
nnoremap <C-P> :Buffers<CR>
nnoremap <C-N> :SFiles<CR>
noremap <Leader>m :History<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
if = "!exists('g:vscode')"
hook_add = '''
nnoremap <silent><Leader>f :NERDTreeToggle<CR>
" quit NERDTree on open
let g:NERDTreeQuitOnOpen=1
" ignore system files
let g:NERDTreeIgnore=['\.DS_Store']
" show hidden files on startup
let g:NERDTreeShowHidden=1
" show bookmarks on startup
let g:NERDTreeShowBookmarks=1
" function to find file under current node
function! NERDTreeFindFile(node)
  if a:node.path.isDirectory == 1
    let path = a:node.path.str()
  else
    let path = a:node.path.getDir().str()
  endif
  NERDTreeClose
  call fzf#vim#files(path, fzf#vim#with_preview())
endfunction
" function to grep files under current node
function! NERDTreeGrepFile(node)
  if a:node.path.isDirectory == 1
    let path = fnamemodify(a:node.path.str(), ":.")
  else
    let path = fnamemodify(a:node.path.getDir().str(), ":.")
  endif
  NERDTreeClose
  call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case \"\" ".fzf#shellescape(path),
        \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}))
endfunction
augroup nerdtree
  autocmd!
  " close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  " find file under current node
  autocmd VimEnter * call NERDTreeAddKeyMap({
        \ 'key': 'zf',
        \ 'callback': 'NERDTreeFindFile',
        \ 'quickhelpText': 'find file under current node',
        \ 'scope': 'Node' })
  " grep files under current node
  autocmd VimEnter * call NERDTreeAddKeyMap({
        \ 'key': 'zg',
        \ 'callback': 'NERDTreeGrepFile',
        \ 'quickhelpText': 'grep files under current node',
        \ 'scope': 'Node' })
augroup END
'''

# ONLY vim

[[plugins]]
repo = 'dense-analysis/ale'
# ALE and lexima make confliction on Neovim https://github.com/cohama/lexima.vim/issues/154
if = "!has('nvim')"

# ONLY nvim

[[plugins]]
repo = 'github/copilot.vim'
if = 'has("nvim")'
hook_add = '''
let g:copilot_filetypes = {
      \ 'markdown': v:false,
      \ 'text': v:false,
      \ }
inoremap <silent><script><expr> <C-j> copilot#Accept("\<CR>")
inoremap <F9> <Plug>(copilot-next)
inoremap <F10> <Plug>(copilot-previous)
let g:copilot_no_tab_map = v:true

'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
if = 'has("nvim")'
depends = ['github/copilot.vim', 'nvim-lua/plenary.nvim']
hook_add = '''
lua << EOF
require('CopilotChat').setup {
  model = 'gpt-4o',
  prompts = {
    Explain = {
      prompt = '/COPILOT_EXPLAIN コードの説明を段落で区切って日本語で説明して．',
      mapping = '<leader>cce',
      description = 'コードの説明',
    },
    Review = {
      prompt = '/COPILOT_REVIEW コードを日本語でレビューして．',
      mapping = '<leader>ccr',
      description = 'コードのレビュー',
    },
    Fix = {
      prompt = '/COPILOT_INSTRUCTIONS このコードには問題がある．問題を特定して修正したコードを表示して．何が問題で，修正したコードがどのように問題を解決したのか日本語で説明して．',
      mapping = '<leader>ccf',
      description = 'コードの修正',
    },
    Optimize = {
      prompt = '/COPILOT_INSTRUCTIONS パフォーマンスと可読性を向上するようにコードを最適化して．最適化の戦略とその変更の利点を日本語で説明して．',
      mapping = '<leader>cco',
      description = 'コードの最適化（リファクタリング）',
    },
    Docs = {
      prompt = '/COPILOT_INSTRUCTIONS コードに対するドキュメントコメントを日本語で生成して．',
      mapping = '<leader>ccd',
      description = 'ドキュメントコメントの生成',
    },
    Tests = {
      prompt = '/COPILOT_INSTRUCTIONS コードに対するテストコードを日本語で生成して．',
      mapping = '<leader>cct',
      description = 'テストコードの生成',
    },
    Commit = {
      prompt = '/COPILOT_INSTRUCTIONS 変更に対するコミットメッセージをcommitizenに従って日本語で書いて．タイトルは50文字以内でメッセージは72文字でwrapして．gitcommitコードブロックのフォーマットで書いて．',
      mapping = '<leader>ccm',
      context = 'git:staged',
      description = 'コミットメッセージの生成',
    },
  },
  mappings = {
    complete = {
      insert = "",
    },
    reset = {
      normal = "",
      insert = "",
    },
  },
  window = {
    linebreak = 0,
  },
}
EOF

" revert linebreak that is set by this plugin
augroup CopilotChatSettings
  autocmd!
  autocmd BufWinEnter copilot-chat setlocal nolinebreak
augroup END

nnoremap <leader>ccl :CopilotChatReset<CR>
nnoremap <leader>ccp :CopilotChatPrompts<CR>
vnoremap <leader>ccp :CopilotChatPrompts<CR>
nnoremap <leader>ccc :CopilotChatToggle<CR>
vnoremap <leader>ccc :CopilotChat<CR>
'''
